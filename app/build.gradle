plugins{
    id 'com.android.application'
    id 'kotlin-android'
    id 'de.mannodermaus.android-junit5'
}

def buildProperties = new Properties()
buildProperties.load(new FileInputStream(rootProject.file("build.properties")))

android {
    signingConfigs {
        release {
            rootProject.file("keystore.properties").with{propertyFile ->
                if (propertyFile.exists()){
                    def keystoreProperties = new Properties()
                    keystoreProperties.load(new FileInputStream(propertyFile))

                    storeFile rootProject.file("keys.jks")
                    storePassword keystoreProperties["storePassword"]
                    keyAlias keystoreProperties["keyAlias"]
                    keyPassword keystoreProperties["keyPassword"]
                }
                else
                    println("$propertyFile.path does not exist")
            }
        }
    }
    compileSdkVersion buildProperties["targetSdkVersion"] as Integer
    defaultConfig {
        applicationId buildProperties["applicationId"]

        minSdkVersion buildProperties["minSdkVersion"] as Integer
        targetSdkVersion buildProperties["targetSdkVersion"] as Integer

        versionCode buildProperties["versionCode"] as Integer
        versionName buildProperties["versionName"]

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument("runnerBuilder", "de.mannodermaus.junit5.AndroidJUnit5Builder")

        buildConfigField "int", "MIN_SDK_VERSION", "$minSdkVersion.apiLevel"
    }
    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            // debuggable true
        }
    }
    compileOptions {
        def javaVersion = JavaVersion.VERSION_11

        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }
    kotlinOptions {
        jvmTarget = buildProperties["javaSdk"]
    }
    testOptions {
        animationsDisabled = true
    }
    packagingOptions {
        resources.excludes.add("META-INF/*")
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    // -------------APP--------------

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Processing
    implementation files('libs/processing-core.jar')

    // Androidx
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'

    // .enable @lifecycleScope
    implementation 'androidx.fragment:fragment-ktx:1.4.1'
    implementation 'androidx.activity:activity-ktx:1.4.0'

    // Logging
    implementation 'com.jakewharton.timber:timber:4.7.1'

    // Snackbar
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'com.github.matecode:Snacky:1.1.5'

    // Animations
    implementation 'com.github.mohammadatif:Animatoo:master'
    implementation 'com.daimajia.androidanimations:library:2.4@aar'

    // ----------TESTS------------

    def junitVersion = "5.8.2"

    // -----------------
    // Unit Tests

    testImplementation "org.junit.jupiter:junit-jupiter:$junitVersion"
    testImplementation "androidx.test.ext:junit:1.1.3"

    // -----------------
    // System Tests

    def espressoVersion = "3.4.0"

    // 4) Jupiter API & Test Runner, if you don't have it already
    androidTestImplementation "androidx.test:runner:1.4.0"
    androidTestImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"

    // 5) The instrumentation test companion libraries
    androidTestImplementation "de.mannodermaus.junit5:android-test-core:1.3.0"
    androidTestRuntimeOnly "de.mannodermaus.junit5:android-test-runner:1.3.0"

    // Jupiter Params
    androidTestImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"

    // Espresso
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
}